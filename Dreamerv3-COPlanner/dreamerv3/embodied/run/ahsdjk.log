Encoder CNN shapes: {'image': (64, 64, 3)}
Encoder MLP shapes: {}
Decoder CNN shapes: {'image': (64, 64, 3)}
Decoder MLP shapes: {}
JAX devices (1): [gpu(id=0)]
Policy devices: gpu:0
Train devices:  gpu:0
Tracing train function.
Optimizer model_opt has 15,686,787 variables.
Optimizer disag_opt has 12,623,872 variables.
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=2/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=2/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=2/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=2/0)>}
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=2/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=2/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=2/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=2/0)>}
{'action': Traced<ShapedArray(float32[15,1024,4])>with<DynamicJaxprTrace(level=1/0)>, 'deter': Traced<ShapedArray(float16[15,1024,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[15,1024,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[15,1024,32,32])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=4/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=4/0)>}
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=4/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=4/0)>}
{'action': Traced<ShapedArray(float32[15,1024,4])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float32[15,1024,4])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float32[15,1024,4])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float32[15,1024,4]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f6eac977fc0>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eacb02d60; dead>, <weakref at 0x7f6eacb02cc0; dead>, <weakref at 0x7f6eacb027c0; dead>, <weakref at 0x7f6eacb02b80; dead>, <weakref at 0x7f6eacb02450; to 'JaxprTracer' at 0x7f6eaca51310>, <weakref at 0x7f6eacb02a90; to 'JaxprTracer' at 0x7f6eaca514a0>, <weakref at 0x7f6eacb02c70; to 'JaxprTracer' at 0x7f6eacb025e0>, <weakref at 0x7f6eacb02720; to 'JaxprTracer' at 0x7f6eacb02e00>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6eac840f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan'))))), 'deter': Traced<ShapedArray(float16[15,1024,512])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float16[15,1024,512])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float16[15,1024,512])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float16[15,1024,512]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f6eac977fc0>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eacb02d60; dead>, <weakref at 0x7f6eacb02cc0; dead>, <weakref at 0x7f6eacb027c0; dead>, <weakref at 0x7f6eacb02b80; dead>, <weakref at 0x7f6eacb02450; to 'JaxprTracer' at 0x7f6eaca51310>, <weakref at 0x7f6eacb02a90; to 'JaxprTracer' at 0x7f6eaca514a0>, <weakref at 0x7f6eacb02c70; to 'JaxprTracer' at 0x7f6eacb025e0>, <weakref at 0x7f6eacb02720; to 'JaxprTracer' at 0x7f6eacb02e00>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6eac840f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan'))))), 'logit': Traced<ShapedArray(float16[15,1024,32,32])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float16[15,1024,32,32])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float16[15,1024,32,32])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float16[15,1024,32,32]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f6eac977fc0>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eacb02d60; dead>, <weakref at 0x7f6eacb02cc0; dead>, <weakref at 0x7f6eacb027c0; dead>, <weakref at 0x7f6eacb02b80; dead>, <weakref at 0x7f6eacb02450; to 'JaxprTracer' at 0x7f6eaca51310>, <weakref at 0x7f6eacb02a90; to 'JaxprTracer' at 0x7f6eaca514a0>, <weakref at 0x7f6eacb02c70; to 'JaxprTracer' at 0x7f6eacb025e0>, <weakref at 0x7f6eacb02720; to 'JaxprTracer' at 0x7f6eacb02e00>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6eac840f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan'))))), 'stoch': Traced<ShapedArray(float16[15,1024,32,32])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float16[15,1024,32,32])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float16[15,1024,32,32])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float16[15,1024,32,32]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f6eac977fc0>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eacb02d60; dead>, <weakref at 0x7f6eacb02cc0; dead>, <weakref at 0x7f6eacb027c0; dead>, <weakref at 0x7f6eacb02b80; dead>, <weakref at 0x7f6eacb02450; to 'JaxprTracer' at 0x7f6eaca51310>, <weakref at 0x7f6eacb02a90; to 'JaxprTracer' at 0x7f6eaca514a0>, <weakref at 0x7f6eacb02c70; to 'JaxprTracer' at 0x7f6eacb025e0>, <weakref at 0x7f6eacb02720; to 'JaxprTracer' at 0x7f6eacb02e00>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6eac840f30>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan')))))}
Optimizer actor_opt has 1,054,728 variables.
Optimizer critic_opt has 1,181,439 variables.
Logdir /fs/cml-projects/Pretrain_MBRL/coplanner_dreamerv3_exp/0.5_1
Observation space:
  reward           Space(dtype=float32, shape=(), low=-inf, high=inf)
  is_first         Space(dtype=bool, shape=(), low=False, high=True)
  is_last          Space(dtype=bool, shape=(), low=False, high=True)
  is_terminal      Space(dtype=bool, shape=(), low=False, high=True)
  position         Space(dtype=float64, shape=(6,), low=-inf, high=inf)
  velocity         Space(dtype=float64, shape=(7,), low=-inf, high=inf)
  touch            Space(dtype=float64, shape=(2,), low=-inf, high=inf)
  image            Space(dtype=uint8, shape=(64, 64, 3), low=0, high=255)
Action space:
  reset            Space(dtype=bool, shape=(), low=False, high=True)
  action           Space(dtype=float32, shape=(4,), low=-1.0, high=1.0)
Prefill train dataset.
train_Episode has 500 steps and return 0.0.
train_Episode has 500 steps and return 0.0.
Saved chunk: 20230915T214511F660296-0WDoYh8R2yPCzpbEeRfuv5-1zrZpIEvjQnTAsVbHphIIX-1024.npz
Prefill eval dataset.
eval_Episode has 500 steps and return 0.0.
eval_Episode has 500 steps and return 0.0.
Saved chunk: 20230915T214516F033631-1r3J7u6WMZ81wzG7WIHNw1-49uI2ljED9dz6Xx02ekPTn-1024.npz
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Step 2200 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
episode/length 500 / episode/score 0 / episode/reward_rate 0 / eval_episode/length 500 / eval_episode/score 0 / eval_episode/reward_rate 0
warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'

warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'


Creating new TensorBoard event file writer.
Did not find any checkpoint.
Writing checkpoint: /fs/cml-projects/Pretrain_MBRL/coplanner_dreamerv3_exp/0.5_1/dmc_hopper_hop/3/checkpoint.ckpt
Start training loop.
Starting evaluation at step 1100 Counter(1100) 1037
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
Saved chunk: 20230915T214519F970042-49uI2ljED9dz6Xx02ekPTn-0000000000000000000000-76.npz
Saved chunk: 20230915T214515F597562-1zrZpIEvjQnTAsVbHphIIX-0000000000000000000000-76.npz
Tracing policy function.
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
Tracing policy function.
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
Tracing policy function.
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
eval_Episode has 500 steps and return 0.0.
Tracing policy function.
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
Tracing train function.
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=4/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=4/0)>}
{'deter': Traced<ShapedArray(float16[4,5120,512])>with<DynamicJaxprTrace(level=4/0)>, 'logit': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'stoch': Traced<ShapedArray(float16[4,5120,32,32])>with<DynamicJaxprTrace(level=4/0)>, 'action': Traced<ShapedArray(float32[4,5120,4])>with<DynamicJaxprTrace(level=4/0)>}
{'action': Traced<ShapedArray(float32[15,1024,4])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float32[15,1024,4])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float32[15,1024,4])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float32[15,1024,4]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f70fc2b4f70>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eac90f6d0; dead>, <weakref at 0x7f6eac90f270; dead>, <weakref at 0x7f6eac90f540; dead>, <weakref at 0x7f6eac90fdb0; dead>, <weakref at 0x7f6eae25f220; to 'JaxprTracer' at 0x7f6eadc495e0>, <weakref at 0x7f6e3c58c310; to 'JaxprTracer' at 0x7f6eac90f4f0>, <weakref at 0x7f6e3c58cb30; to 'JaxprTracer' at 0x7f6eac90fe50>, <weakref at 0x7f6e3c58cdb0; to 'JaxprTracer' at 0x7f6eac90f220>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6df80bc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan'))))), 'deter': Traced<ShapedArray(float16[15,1024,512])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float16[15,1024,512])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float16[15,1024,512])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float16[15,1024,512]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f70fc2b4f70>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eac90f6d0; dead>, <weakref at 0x7f6eac90f270; dead>, <weakref at 0x7f6eac90f540; dead>, <weakref at 0x7f6eac90fdb0; dead>, <weakref at 0x7f6eae25f220; to 'JaxprTracer' at 0x7f6eadc495e0>, <weakref at 0x7f6e3c58c310; to 'JaxprTracer' at 0x7f6eac90f4f0>, <weakref at 0x7f6e3c58cb30; to 'JaxprTracer' at 0x7f6eac90fe50>, <weakref at 0x7f6e3c58cdb0; to 'JaxprTracer' at 0x7f6eac90f220>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6df80bc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan'))))), 'logit': Traced<ShapedArray(float16[15,1024,32,32])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float16[15,1024,32,32])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float16[15,1024,32,32])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float16[15,1024,32,32]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f70fc2b4f70>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eac90f6d0; dead>, <weakref at 0x7f6eac90f270; dead>, <weakref at 0x7f6eac90f540; dead>, <weakref at 0x7f6eac90fdb0; dead>, <weakref at 0x7f6eae25f220; to 'JaxprTracer' at 0x7f6eadc495e0>, <weakref at 0x7f6e3c58c310; to 'JaxprTracer' at 0x7f6eac90f4f0>, <weakref at 0x7f6e3c58cb30; to 'JaxprTracer' at 0x7f6eac90fe50>, <weakref at 0x7f6e3c58cdb0; to 'JaxprTracer' at 0x7f6eac90f220>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6df80bc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan'))))), 'stoch': Traced<ShapedArray(float16[15,1024,32,32])>with<JVPTrace(level=3/0)> with
  primal = Traced<ShapedArray(float16[15,1024,32,32])>with<DynamicJaxprTrace(level=1/0)>
  tangent = Traced<ShapedArray(float16[15,1024,32,32])>with<JaxprTrace(level=2/0)> with
    pval = (ShapedArray(float16[15,1024,32,32]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7f70fc2b4f70>, in_tracers=(Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1028,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[512,1024]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1536,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[512,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4096,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,4,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,4,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(int32[15,1024,2]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,4]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1536]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,512]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float16[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(bool[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,32]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>, Traced<ShapedArray(float32[15,1024,32,1]):JaxprTrace(level=2/0)>), out_tracer_refs=[<weakref at 0x7f6eac90f6d0; dead>, <weakref at 0x7f6eac90f270; dead>, <weakref at 0x7f6eac90f540; dead>, <weakref at 0x7f6eac90fdb0; dead>, <weakref at 0x7f6eae25f220; to 'JaxprTracer' at 0x7f6eadc495e0>, <weakref at 0x7f6e3c58c310; to 'JaxprTracer' at 0x7f6eac90f4f0>, <weakref at 0x7f6e3c58cb30; to 'JaxprTracer' at 0x7f6eac90fe50>, <weakref at 0x7f6e3c58cdb0; to 'JaxprTracer' at 0x7f6eac90f220>], out_avals=[ShapedArray(float32[1024,4]), ShapedArray(float16[1024,512]), ShapedArray(float16[1024,32,32]), ShapedArray(float16[1024,32,32]), ShapedArray(float32[15,1024,4]), ShapedArray(float16[15,1024,512]), ShapedArray(float16[15,1024,32,32]), ShapedArray(float16[15,1024,32,32])], primitive=scan, params={'reverse': False, 'length': 15, 'unroll': 1, 'jaxpr': { lambda ; a:f32[1,512] b:f16[512,512] c:f32[1,512] d:f16[512,4] e:f16[512,4] f:f16[1028,512]
    g:f32[1,512] h:f16[1024,1536] i:f32[1,1536] j:f16[512,512] k:f32[1,512] l:f16[512,1024]
    m:f32[1024,32,1] n:f32[1536,512] o:f32[512] p:f32[512] q:f32[512,512] r:f32[512]
    s:f32[512] t:f32[512,4] u:f32[4] v:f32[512,4] w:f32[4] x:f32[1024,4] y:f16[1024,512]
    z:f16[1024,32,32] ba:f16[1024,32,32] bb:f32[1,4,1024,4] bc:f16[4096,1536] bd:f32[4096,1]
    be:f32[4096,512] bf:f32[4096,512] bg:f32[4096,1] bh:f32[4096,1] bi:f32[4096,512]
    bj:f16[4096,512] bk:f16[4096,512] bl:f16[4096,512] bm:f16[4096,512] bn:f32[4096,1]
    bo:f32[4096,512] bp:f32[4096,512] bq:f32[4096,1] br:f32[4096,1] bs:f32[4096,512]
    bt:f16[4096,512] bu:f16[4096,512] bv:f16[4096,512] bw:f16[4,1024,512] bx:f32[4,1024,4]
    by:f32[4,1024,4] bz:f32[4,1024,4] ca:i32[1024,2] cb:f16[1024,4] cc:f32[1024,1]
    cd:f32[1024,512] ce:f32[1024,512] cf:f32[1024,1] cg:f32[1024,1] ch:f16[1024,512]
    ci:f16[1024,512] cj:f16[1024,512] ck:f32[1024,1] cl:f32[1024,1536] cm:f32[1024,1536]
    cn:f32[1024,1] co:f32[1024,1] cp:f16[1024,512] cq:f16[1024,512] cr:f16[1024,512]
    cs:f16[1024,512] ct:f16[1024,512] cu:f16[1024,512] cv:f16[1024,512] cw:f16[1024,512]
    cx:f16[1024,512] cy:f32[1024,1] cz:f32[1024,512] da:f32[1024,512] db:f32[1024,1]
    dc:f32[1024,1] dd:f16[1024,512] de:f16[1024,512] df:f16[1024,512] dg:f16[1024,32,32]
    dh:f16[1024,32,1] di:f16[1024,32,1] dj:f16[1024,32,32] dk:f32[1024,32,32] dl:f32[1024,32]
    dm:bool[1024,32,1] dn:f32[1024,32,32] do:f32[1024,32,1] dp:f32[1024,32,1]. let
    dq:f16[1536,512] = convert_element_type[new_dtype=float16 weak_type=False] n
    dr:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bc dq
    ds:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] dr
    dt:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] ds bd be bf bg bh
    eo:f32[4096,512] = mul dt a
    ep:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] o
    eq:f32[4096,512] = mul bi ep
    er:f32[4096,512] = add_any eo eq
    es:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] p
    et:f32[4096,512] = add er es
    eu:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] et
    ev:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] eu bj bk bl
    fh:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ev b
    fi:f16[512,512] = convert_element_type[new_dtype=float16 weak_type=False] q
    fj:f16[4096,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] bm fi
    fk:f16[4096,512] = add_any fh fj
    fl:f32[4096,512] = convert_element_type[new_dtype=float32 weak_type=False] fk
    fm:f32[4096,512] = pjit[
      jaxpr={ lambda ; du:f32[4096,512] dv:f32[4096,1] dw:f32[4096,512] dx:f32[4096,512]
          dy:f32[4096,1] dz:f32[4096,1]. let
          ea:f32[4096] = reduce_sum[axes=(1,)] du
          eb:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] ea
          ec:f32[4096,1] = div eb 512.0
          ed:f32[4096,512] = sub du ec
          ee:f32[4096,512] = mul ed dv
          ef:f32[4096,512] = mul du dx
          eg:f32[4096] = reduce_sum[axes=(1,)] ef
          eh:f32[4096,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(4096, 1)
          ] eg
          ei:f32[4096,1] = div eh 512.0
          ej:f32[4096,1] = mul ec dy
          ek:f32[4096,1] = sub ei ej
          el:f32[4096,1] = mul ek dz
          em:f32[4096,512] = mul dw el
          en:f32[4096,512] = add_any ee em
        in (en,) }
      name=standardize
    ] fl bn bo bp bq br
    fn:f32[4096,512] = mul fm c
    fo:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] r
    fp:f32[4096,512] = mul bs fo
    fq:f32[4096,512] = add_any fn fp
    fr:f32[1,512] = broadcast_in_dim[broadcast_dimensions=(1,) shape=(1, 512)] s
    fs:f32[4096,512] = add fq fr
    ft:f16[4096,512] = convert_element_type[new_dtype=float16 weak_type=False] fs
    fu:f16[4096,512] = pjit[
      jaxpr={ lambda ; ew:f16[4096,512] ex:f16[4096,512] ey:f16[4096,512] ez:f16[4096,512]. let
          fa:f16[4096,512] = mul ew ex
          fb:f16[4096,512] = pjit[
            jaxpr={ lambda ; fc:f16[4096,512] fd:f16[4096,512]. let
                fe:f16[4096,512] = mul fc fd
              in (fe,) }
            name=sigmoid
          ] ew ez
          ff:f16[4096,512] = mul ey fb
          fg:f16[4096,512] = add_any fa ff
        in (fg,) }
      name=silu
    ] ft bt bu bv
    fv:f16[4,1024,512] = reshape[dimensions=None new_sizes=(4, 1024, 512)] fu
    fw:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv d
    fx:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] v
    fy:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw fx
    fz:f16[4,1024,4] = add_any fw fy
    ga:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] w
    gb:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] ga
    gc:f16[4,1024,4] = add fz gb
    gd:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gc
    ge:f32[4,1024,4] = pjit[
      jaxpr={ lambda ; gf:f32[4,1024,4] gg:f32[4,1024,4]. let
          gh:f32[4,1024,4] = mul gf gg
        in (gh,) }
      name=sigmoid
    ] gd bx
    gi:f32[4,1024,4] = mul 0.8999999761581421 ge
    gj:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gi
    gk:f32[1,4,1024,4] = mul bb gj
    gl:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] fv e
    gm:f16[512,4] = convert_element_type[new_dtype=float16 weak_type=False] t
    gn:f16[4,1024,4] = dot_general[dimension_numbers=(([2], [0]), ([], []))] bw gm
    go:f16[4,1024,4] = add_any gl gn
    gp:f16[4] = convert_element_type[new_dtype=float16 weak_type=False] u
    gq:f16[1,1,4] = broadcast_in_dim[broadcast_dimensions=(2,) shape=(1, 1, 4)] gp
    gr:f16[4,1024,4] = add go gq
    gs:f32[4,1024,4] = convert_element_type[new_dtype=float32 weak_type=False] gr
    gt:f32[4,1024,4] = mul gs by
    gu:f32[4,1024,4] = add gs gt
    gv:f32[4,1024,4] = mul gu bz
    gw:f32[1,4,1024,4] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 4, 1024, 4)
    ] gv
    gx:f32[1,4,1024,4] = add gk gw
    gy:f32[4,1024,4] = reshape[dimensions=None new_sizes=(4, 1024, 4)] gx
    gz:f32[1024,4] = gather[
      dimension_numbers=GatherDimensionNumbers(offset_dims=(1,), collapsed_slice_dims=(0, 1), start_index_map=(0, 1))
      fill_value=None
      indices_are_sorted=False
      mode=GatherScatterMode.PROMISE_IN_BOUNDS
      slice_sizes=(1, 1, 4)
      unique_indices=False
    ] gy ca
    ha:f16[1024,1024] = reshape[dimensions=None new_sizes=(1024, 1024)] ba
    hb:f16[1024,4] = convert_element_type[new_dtype=float16 weak_type=False] x
    hc:f16[1024,4] = mul hb cb
    hd:f16[1024,1028] = concatenate[dimension=1] ha hc
    he:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] hd f
    hf:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] he
    hg:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] hf cc cd ce cf cg
    ib:f32[1024,512] = mul hg g
    ic:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] ib
    id:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] ic ch ci cj
    ip:f16[1024,1024] = concatenate[dimension=1] y id
    iq:f16[1024,1536] = dot_general[dimension_numbers=(([1], [0]), ([], []))] ip
      h
    ir:f32[1024,1536] = convert_element_type[new_dtype=float32 weak_type=False] iq
    is:f32[1024,1536] = pjit[
      jaxpr={ lambda ; it:f32[1024,1536] iu:f32[1024,1] iv:f32[1024,1536] iw:f32[1024,1536]
          ix:f32[1024,1] iy:f32[1024,1]. let
          iz:f32[1024] = reduce_sum[axes=(1,)] it
          ja:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] iz
          jb:f32[1024,1] = div ja 1536.0
          jc:f32[1024,1536] = sub it jb
          jd:f32[1024,1536] = mul jc iu
          je:f32[1024,1536] = mul it iw
          jf:f32[1024] = reduce_sum[axes=(1,)] je
          jg:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] jf
          jh:f32[1024,1] = div jg 1536.0
          ji:f32[1024,1] = mul jb ix
          jj:f32[1024,1] = sub jh ji
          jk:f32[1024,1] = mul jj iy
          jl:f32[1024,1536] = mul iv jk
          jm:f32[1024,1536] = add_any jd jl
        in (jm,) }
      name=standardize
    ] ir ck cl cm cn co
    jn:f32[1024,1536] = mul is i
    jo:f16[1024,1536] = convert_element_type[new_dtype=float16 weak_type=False] jn
    jp:f16[1024,512] = slice[
      limit_indices=(1024, 1536)
      start_indices=(0, 1024)
      strides=None
    ] jo
    jq:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] jp cp
    jr:f16[1024,512] = mul jq cq
    js:f16[1024,512] = slice[
      limit_indices=(1024, 512)
      start_indices=(0, 0)
      strides=None
    ] jo
    jt:f16[1024,512] = pjit[
      jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
          im:f16[1024,512] = mul ik il
        in (im,) }
      name=sigmoid
    ] js cs
    ju:f16[1024,512] = mul jt ct
    jv:f16[1024,512] = slice[
      limit_indices=(1024, 1024)
      start_indices=(0, 512)
      strides=None
    ] jo
    jw:f16[1024,512] = mul cu jv
    jx:f16[1024,512] = add_any ju jw
    jy:f16[1024,512] = mul jx cq
    jz:f16[1024,512] = add jx jy
    ka:f16[1024,512] = mul jz cv
    kb:f16[1024,512] = mul cr ka
    kc:f16[1024,512] = add_any jr kb
    kd:f16[1024,512] = neg jq
    ke:f16[1024,512] = mul kd cw
    kf:f16[1024,512] = mul cx y
    kg:f16[1024,512] = add_any ke kf
    kh:f16[1024,512] = add kc kg
    ki:f16[1024,512] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kh j
    kj:f32[1024,512] = convert_element_type[new_dtype=float32 weak_type=False] ki
    kk:f32[1024,512] = pjit[
      jaxpr={ lambda ; hh:f32[1024,512] hi:f32[1024,1] hj:f32[1024,512] hk:f32[1024,512]
          hl:f32[1024,1] hm:f32[1024,1]. let
          hn:f32[1024] = reduce_sum[axes=(1,)] hh
          ho:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] hn
          hp:f32[1024,1] = div ho 512.0
          hq:f32[1024,512] = sub hh hp
          hr:f32[1024,512] = mul hq hi
          hs:f32[1024,512] = mul hh hk
          ht:f32[1024] = reduce_sum[axes=(1,)] hs
          hu:f32[1024,1] = broadcast_in_dim[
            broadcast_dimensions=(0,)
            shape=(1024, 1)
          ] ht
          hv:f32[1024,1] = div hu 512.0
          hw:f32[1024,1] = mul hp hl
          hx:f32[1024,1] = sub hv hw
          hy:f32[1024,1] = mul hx hm
          hz:f32[1024,512] = mul hj hy
          ia:f32[1024,512] = add_any hr hz
        in (ia,) }
      name=standardize
    ] kj cy cz da db dc
    kl:f32[1024,512] = mul kk k
    km:f16[1024,512] = convert_element_type[new_dtype=float16 weak_type=False] kl
    kn:f16[1024,512] = pjit[
      jaxpr={ lambda ; ie:f16[1024,512] if:f16[1024,512] ig:f16[1024,512] ih:f16[1024,512]. let
          ii:f16[1024,512] = mul ie if
          ij:f16[1024,512] = pjit[
            jaxpr={ lambda ; ik:f16[1024,512] il:f16[1024,512]. let
                im:f16[1024,512] = mul ik il
              in (im,) }
            name=sigmoid
          ] ie ih
          in:f16[1024,512] = mul ig ij
          io:f16[1024,512] = add_any ii in
        in (io,) }
      name=silu
    ] km dd de df
    ko:f16[1024,1024] = dot_general[dimension_numbers=(([1], [0]), ([], []))] kn
      l
    kp:f16[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] ko
    kq:f16[1024,32,32] = mul kp dg
    kr:f16[1024,32,32] = div kq dh
    ks:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] kq
    kt:f32[1024,32] = reduce_sum[axes=(2,)] ks
    ku:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] kt
    kv:f16[1024,32,1] = convert_element_type[new_dtype=float16 weak_type=False] ku
    kw:f16[1024,32,1] = neg kv
    kx:f16[1024,32,32] = mul kw dg
    ky:f16[1024,32,32] = mul kx di
    kz:f16[1024,32,32] = add_any kr ky
    la:f16[1024,32,32] = mul 0.990234375 kz
    lb:f16[1024,32,32] = div la dj
    lc:f32[1024,32,32] = convert_element_type[new_dtype=float32 weak_type=False] lb
    ld:f32[1024,32,32] = mul lc dk
    le:f32[1024,32] = reduce_sum[axes=(2,)] ld
    lf:f32[1024,32] = div le dl
    lg:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lf
    lh:f32[1024,32,1] = pjit[
      jaxpr={ lambda ; li:f32[1024,32,1] lj:bool[1024,32,1] lk:f32[1024,32,1]. let
          ll:f32[1024,32,1] = select_n lj li lk
        in (ll,) }
      name=_where
    ] lg dm m
    lm:f32[1024,32,32] = sub lc lh
    ln:f32[1024,32,32] = mul lm dn
    lo:f32[1024,32,32] = div ln do
    lp:f32[1024,32] = reduce_sum[axes=(2,)] ln
    lq:f32[1024,32,1] = broadcast_in_dim[
      broadcast_dimensions=(0, 1)
      shape=(1024, 32, 1)
    ] lp
    lr:f32[1024,32,1] = neg lq
    ls:f32[1024,32,32] = mul lr dn
    lt:f32[1024,32,32] = mul ls dp
    lu:f32[1024,32,32] = add_any lo lt
    lv:f32[1,1024,32,32] = broadcast_in_dim[
      broadcast_dimensions=(1, 2, 3)
      shape=(1, 1024, 32, 32)
    ] lu
    lw:f32[1024,32,32] = reshape[dimensions=None new_sizes=(1024, 32, 32)] lv
    lx:f16[1024,32,32] = convert_element_type[new_dtype=float16 weak_type=False] lw
  in (gz, kh, lb, lx, gz, kh, lb, lx) }, 'linear': (False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False), 'num_consts': 23, 'num_carry': 4}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f6df80bc9b0>, name_stack=NameStack(stack=(Transform(name='jvp'), Scope(name='wm'), Scope(name='scan')))))}
Tracing report function.
Tracing report function.
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Step 2202 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
eval_episode/length 500 / eval_episode/score 0 / eval_episode/reward_rate 0 / train/action_mag 4.24 / train/action_max 4.24 / train/action_mean 3.2e-3 / train/action_min -3.98 / train/action_std 1 / train/actor_opt_actor_opt_grad_overflow 0 / 
train/actor_opt_actor_opt_grad_scale 1e4 / train/actor_opt_grad_norm 1.6e-4 / train/actor_opt_grad_steps 1 / train/actor_opt_loss -1.67 / train/adv_mag 0 / train/adv_max 0 / train/adv_mean 0 / train/adv_min 0 / train/adv_std 0 / train/cont_avg 1 / train/cont_loss_mean 
0.88 / train/cont_loss_std 0.37 / train/cont_neg_acc nan / train/cont_neg_loss nan / train/cont_pos_acc 0.35 / train/cont_pos_loss 0.88 / train/cont_pred 0.44 / train/cont_rate 1 / train/disag_opt_disag_opt_grad_overflow 0 / train/disag_opt_disag_opt_grad_scale 1e4 / 
train/disag_opt_grad_norm 674.78 / train/disag_opt_grad_steps 1 / train/disag_opt_loss 2.2e7 / train/dyn_loss_mean 7.59 / train/dyn_loss_std 0.3 / train/extr_critic_critic_opt_critic_opt_grad_overflow 0 / train/extr_critic_critic_opt_critic_opt_grad_scale 1e4 / 
train/extr_critic_critic_opt_grad_norm 1.76 / train/extr_critic_critic_opt_grad_steps 1 / train/extr_critic_critic_opt_loss 1.2e4 / train/extr_critic_mag 0 / train/extr_critic_max -inf / train/extr_critic_mean 0 / train/extr_critic_min 0 / train/extr_critic_std 0 / 
train/extr_return_normed_mag 0 / train/extr_return_normed_max -inf / train/extr_return_normed_mean 0 / train/extr_return_normed_min 0 / train/extr_return_normed_std 0 / train/extr_return_rate 0 / train/extr_return_raw_mag 0 / train/extr_return_raw_max 0 / 
train/extr_return_raw_mean 0 / train/extr_return_raw_min 0 / train/extr_return_raw_std 0 / train/extr_reward_mag 0 / train/extr_reward_max -inf / train/extr_reward_mean 0 / train/extr_reward_min 0 / train/extr_reward_std 0 / train/image_loss_mean 2313.84 / 
train/image_loss_std 30.58 / train/model_loss_mean 2324.82 / train/model_loss_std 30.59 / train/model_opt_grad_norm nan / train/model_opt_grad_steps 0 / train/model_opt_loss 2.3e7 / train/model_opt_model_opt_grad_overflow 1 / train/model_opt_model_opt_grad_scale 5000 / 
train/policy_entropy_mag 5.49 / train/policy_entropy_max 5.49 / train/policy_entropy_mean 5.02 / train/policy_entropy_min 3.93 / train/policy_entropy_std 0.2 / train/policy_logprob_mag 15.61 / train/policy_logprob_max -2.39 / train/policy_logprob_mean -4.99 / 
train/policy_logprob_min -15.61 / train/policy_logprob_std 1.39 / train/policy_randomness_mag 0.98 / train/policy_randomness_max 0.98 / train/policy_randomness_mean 0.93 / train/policy_randomness_min 0.81 / train/policy_randomness_std 0.02 / train/post_ent_mag 107.29 / 
train/post_ent_max 107.29 / train/post_ent_mean 107.04 / train/post_ent_min 106.72 / train/post_ent_std 0.1 / train/prior_ent_mag 108.03 / train/prior_ent_max 108.03 / train/prior_ent_mean 107.39 / train/prior_ent_min 106.3 / train/prior_ent_std 0.23 / 
train/rep_loss_mean 7.59 / train/rep_loss_std 0.3 / train/reward_avg 0 / train/reward_loss_mean 5.54 / train/reward_loss_std 9.5e-7 / train/reward_max_data 0 / train/reward_max_pred 0 / train/reward_neg_acc 1 / train/reward_neg_loss 5.54 / train/reward_pos_acc nan / 
train/reward_pos_loss nan / train/reward_pred 0 / train/reward_rate 0 / train/params_agent/disag_reward/disag_opt 1.3e7 / train/params_agent/wm/model_opt 1.6e7 / train/params_agent/task_behavior/critic/critic_opt 1.2e6 / train/params_agent/task_behavior/ac/actor_opt 
1.1e6 / report/cont_avg 1 / report/cont_loss_mean 0.87 / report/cont_loss_std 0.36 / report/cont_neg_acc nan / report/cont_neg_loss nan / report/cont_pos_acc 0.35 / report/cont_pos_loss 0.87 / report/cont_pred 0.45 / report/cont_rate 1 / report/dyn_loss_mean 7.6 / 
report/dyn_loss_std 0.31 / report/image_loss_mean 2311.96 / report/image_loss_std 30.53 / report/model_loss_mean 2322.92 / report/model_loss_std 30.56 / report/post_ent_mag 107.34 / report/post_ent_max 107.34 / report/post_ent_mean 107.04 / report/post_ent_min 106.7 / 
report/post_ent_std 0.11 / report/prior_ent_mag 107.97 / report/prior_ent_max 107.97 / report/prior_ent_mean 107.41 / report/prior_ent_min 106.41 / report/prior_ent_std 0.21 / report/rep_loss_mean 7.6 / report/rep_loss_std 0.31 / report/reward_avg 0 / 
report/reward_loss_mean 5.54 / report/reward_loss_std 9.5e-7 / report/reward_max_data 0 / report/reward_max_pred 0 / report/reward_neg_acc 1 / report/reward_neg_loss 5.54 / report/reward_pos_acc nan / report/reward_pos_loss nan / report/reward_pred 0 / 
report/reward_rate 0 / eval/cont_avg 1 / eval/cont_loss_mean 0.86 / eval/cont_loss_std 0.39 / eval/cont_neg_acc nan / eval/cont_neg_loss nan / eval/cont_pos_acc 0.37 / eval/cont_pos_loss 0.86 / eval/cont_pred 0.45 / eval/cont_rate 1 / eval/dyn_loss_mean 7.57 / 
eval/dyn_loss_std 0.3 / eval/image_loss_mean 2306.85 / eval/image_loss_std 30.82 / eval/model_loss_mean 2317.79 / eval/model_loss_std 30.8 / eval/post_ent_mag 107.39 / eval/post_ent_max 107.39 / eval/post_ent_mean 107.05 / eval/post_ent_min 106.74 / eval/post_ent_std 
0.1 / eval/prior_ent_mag 108.05 / eval/prior_ent_max 108.05 / eval/prior_ent_mean 107.42 / eval/prior_ent_min 106.7 / eval/prior_ent_std 0.2 / eval/rep_loss_mean 7.57 / eval/rep_loss_std 0.3 / eval/reward_avg 0 / eval/reward_loss_mean 5.54 / eval/reward_loss_std 9.5e-7 
/ eval/reward_max_data 0 / eval/reward_max_pred 0 / eval/reward_neg_acc 1 / eval/reward_neg_loss 5.54 / eval/reward_pos_acc nan / eval/reward_pos_loss nan / eval/reward_pred 0 / eval/reward_rate 0 / replay/size 1038 / replay/inserts 1038 / replay/samples 112 / 
replay/insert_wait_avg 2.2e-6 / replay/insert_wait_frac 1 / replay/sample_wait_avg 1.6e-6 / replay/sample_wait_frac 1 / eval_replay/size 1538 / eval_replay/inserts 1538 / eval_replay/samples 112 / eval_replay/insert_wait_avg 2.2e-6 / eval_replay/insert_wait_frac 1 / 
eval_replay/sample_wait_avg 1.7e-6 / eval_replay/sample_wait_frac 1 / timer/duration 128.29 / timer/env.step_count 1101 / timer/env.step_total 4.16 / timer/env.step_frac 0.03 / timer/env.step_avg 3.8e-3 / timer/env.step_min 3.4e-3 / timer/env.step_max 0.16 / 
timer/replay._sample_count 112 / timer/replay._sample_total 44.53 / timer/replay._sample_frac 0.35 / timer/replay._sample_avg 0.4 / timer/replay._sample_min 8.7e-4 / timer/replay._sample_max 1.82 / timer/agent.save_count 1 / timer/agent.save_total 0.4 / 
timer/agent.save_frac 3.1e-3 / timer/agent.save_avg 0.4 / timer/agent.save_min 0.4 / timer/agent.save_max 0.4 / timer/agent.policy_count 502 / timer/agent.policy_total 26.14 / timer/agent.policy_frac 0.2 / timer/agent.policy_avg 0.05 / timer/agent.policy_min 3.4e-3 / 
timer/agent.policy_max 11.51 / timer/dataset_train_count 1 / timer/dataset_train_total 2.6e-5 / timer/dataset_train_frac 2e-7 / timer/dataset_train_avg 2.6e-5 / timer/dataset_train_min 2.6e-5 / timer/dataset_train_max 2.6e-5 / timer/agent.train_count 1 / 
timer/agent.train_total 82.24 / timer/agent.train_frac 0.64 / timer/agent.train_avg 82.24 / timer/agent.train_min 82.24 / timer/agent.train_max 82.24 / timer/agent.report_count 2 / timer/agent.report_total 8.54 / timer/agent.report_frac 0.07 / timer/agent.report_avg 
4.27 / timer/agent.report_min 0.07 / timer/agent.report_max 8.47 / timer/dataset_eval_count 1 / timer/dataset_eval_total 5.4e-5 / timer/dataset_eval_frac 4.2e-7 / timer/dataset_eval_avg 5.4e-5 / timer/dataset_eval_min 5.4e-5 / timer/dataset_eval_max 5.4e-5
warning: Linking two modules of different target triples: 'LLVMDialectModule' is 'nvptx64-nvidia-gpulibs' whereas '' is 'nvptx64-nvidia-cuda'


Tracing policy function.
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
{'deter': Traced<ShapedArray(float16[4,5,512])>with<DynamicJaxprTrace(level=1/0)>, 'logit': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'stoch': Traced<ShapedArray(float16[4,5,32,32])>with<DynamicJaxprTrace(level=1/0)>, 'action': Traced<ShapedArray(float32[4,5,4])>with<DynamicJaxprTrace(level=1/0)>}
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
Starting evaluation at step 1500 Counter(1500) 1437
Saved chunk: 20230915T214519F970042-49uI2ljED9dz6Xx02ekPTn-1CsQkCNcXJG0cP23qoZjaP-1024.npz
eval_Episode has 500 steps and return 0.0.
train_Episode has 500 steps and return 0.0.
Starting evaluation at step 2000 Counter(2000) 1937
eval_Episode has 500 steps and return 0.0.
train_Episode has 500 steps and return 0.0.
Saved chunk: 20230915T214515F597562-1zrZpIEvjQnTAsVbHphIIX-6lF2nqDidyJuPzp5GKNNg3-1024.npz
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Step 4362 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
eval_episode/length 500 / eval_episode/score 0 / eval_episode/reward_rate 0 / episode/length 500 / episode/score 0 / episode/reward_rate 0 / train/action_mag 4.38 / train/action_max 4.3 / train/action_mean 0.07 / train/action_min -4.08 / train/action_std 0.98 / 
train/actor_opt_actor_opt_grad_overflow 0 / train/actor_opt_actor_opt_grad_scale 1e4 / train/actor_opt_grad_norm 2.2e-4 / train/actor_opt_grad_steps 275 / train/actor_opt_loss -16.33 / train/adv_mag 6.4e-7 / train/adv_max 5.3e-7 / train/adv_mean -2.8e-8 / train/adv_min 
-6.4e-7 / train/adv_std 1.5e-7 / train/cont_avg 1 / train/cont_loss_mean 0.02 / train/cont_loss_std 7.3e-3 / train/cont_neg_acc nan / train/cont_neg_loss nan / train/cont_pos_acc 0.99 / train/cont_pos_loss 0.02 / train/cont_pred 0.99 / train/cont_rate 1 / 
train/disag_opt_disag_opt_grad_overflow 0 / train/disag_opt_disag_opt_grad_scale 1e4 / train/disag_opt_grad_norm 32.84 / train/disag_opt_grad_steps 275 / train/disag_opt_loss 2.4e6 / train/dyn_loss_mean 1.48 / train/dyn_loss_std 0.05 / 
train/extr_critic_critic_opt_critic_opt_grad_overflow 0 / train/extr_critic_critic_opt_critic_opt_grad_scale 1e4 / train/extr_critic_critic_opt_grad_norm 18.36 / train/extr_critic_critic_opt_grad_steps 275 / train/extr_critic_critic_opt_loss 3.4e4 / 
train/extr_critic_mag 5e-7 / train/extr_critic_max 4.9e-7 / train/extr_critic_mean 5.2e-9 / train/extr_critic_min -9.5e-8 / train/extr_critic_std 1.1e-7 / train/extr_return_normed_mag 6.5e-7 / train/extr_return_normed_max 5.7e-7 / train/extr_return_normed_mean 8.1e-8 / 
train/extr_return_normed_min -8e-8 / train/extr_return_normed_std 9.4e-8 / train/extr_return_rate 0 / train/extr_return_raw_mag 5.8e-7 / train/extr_return_raw_max 4.7e-7 / train/extr_return_raw_mean -2.3e-8 / train/extr_return_raw_min -1.8e-7 / train/extr_return_raw_std
9.4e-8 / train/extr_reward_mag 2.6e-8 / train/extr_reward_max -inf / train/extr_reward_mean -4.8e-9 / train/extr_reward_min -2.6e-8 / train/extr_reward_std 6.1e-9 / train/image_loss_mean 99.46 / train/image_loss_std 8.07 / train/model_loss_mean 101.01 / 
train/model_loss_std 8.08 / train/model_opt_grad_norm 253.05 / train/model_opt_grad_steps 266 / train/model_opt_loss 1972.86 / train/model_opt_model_opt_grad_overflow 0 / train/model_opt_model_opt_grad_scale 19.53 / train/policy_entropy_mag 5.65 / 
train/policy_entropy_max 5.65 / train/policy_entropy_mean 5.62 / train/policy_entropy_min 5.43 / train/policy_entropy_std 0.01 / train/policy_logprob_mag 14.81 / train/policy_logprob_max -3.59 / train/policy_logprob_mean -5.36 / train/policy_logprob_min -14.81 / 
train/policy_logprob_std 1.22 / train/policy_randomness_mag 1 / train/policy_randomness_max 1 / train/policy_randomness_mean 0.99 / train/policy_randomness_min 0.97 / train/policy_randomness_std 1.3e-3 / train/post_ent_mag 84.61 / train/post_ent_max 84.61 / 
train/post_ent_mean 83.65 / train/post_ent_min 83.3 / train/post_ent_std 0.18 / train/prior_ent_mag 90 / train/prior_ent_max 90 / train/prior_ent_mean 88.89 / train/prior_ent_min 88.66 / train/prior_ent_std 0.18 / train/rep_loss_mean 1.48 / train/rep_loss_std 0.05 / 
train/reward_avg 0 / train/reward_loss_mean 0.65 / train/reward_loss_std 1.6e-3 / train/reward_max_data 0 / train/reward_max_pred 2.2e-8 / train/reward_neg_acc 1 / train/reward_neg_loss 0.65 / train/reward_pos_acc nan / train/reward_pos_loss nan / train/reward_pred 
-2e-9 / train/reward_rate 0 / train_stats/mean_log_entropy 5.59 / eval_stats/mean_log_entropy 0 / report/cont_avg 1 / report/cont_loss_mean 1.1e-5 / report/cont_loss_std 3.8e-6 / report/cont_neg_acc nan / report/cont_neg_loss nan / report/cont_pos_acc 1 / 
report/cont_pos_loss 1.1e-5 / report/cont_pred 1 / report/cont_rate 1 / report/dyn_loss_mean 1.38 / report/dyn_loss_std 0.53 / report/image_loss_mean 30.07 / report/image_loss_std 8.34 / report/model_loss_mean 30.91 / report/model_loss_std 8.54 / report/post_ent_mag 
75.79 / report/post_ent_max 75.79 / report/post_ent_mean 71.35 / report/post_ent_min 68.82 / report/post_ent_std 0.99 / report/prior_ent_mag 74.86 / report/prior_ent_max 74.86 / report/prior_ent_mean 72.81 / report/prior_ent_min 72.57 / report/prior_ent_std 0.38 / 
report/rep_loss_mean 1.38 / report/rep_loss_std 0.53 / report/reward_avg 0 / report/reward_loss_mean 0.01 / report/reward_loss_std 3.1e-5 / report/reward_max_data 0 / report/reward_max_pred 0 / report/reward_neg_acc 1 / report/reward_neg_loss 0.01 / 
report/reward_pos_acc nan / report/reward_pos_loss nan / report/reward_pred 0 / report/reward_rate 0 / eval/cont_avg 1 / eval/cont_loss_mean 1.1e-5 / eval/cont_loss_std 3.7e-6 / eval/cont_neg_acc nan / eval/cont_neg_loss nan / eval/cont_pos_acc 1 / eval/cont_pos_loss 
1.1e-5 / eval/cont_pred 1 / eval/cont_rate 1 / eval/dyn_loss_mean 1.15 / eval/dyn_loss_std 0.32 / eval/image_loss_mean 29.23 / eval/image_loss_std 6.12 / eval/model_loss_mean 29.94 / eval/model_loss_std 6.22 / eval/post_ent_mag 75.06 / eval/post_ent_max 75.06 / 
eval/post_ent_mean 71.2 / eval/post_ent_min 68.77 / eval/post_ent_std 0.91 / eval/prior_ent_mag 74.86 / eval/prior_ent_max 74.86 / eval/prior_ent_mean 72.77 / eval/prior_ent_min 72.55 / eval/prior_ent_std 0.34 / eval/rep_loss_mean 1.15 / eval/rep_loss_std 0.32 / 
eval/reward_avg 0 / eval/reward_loss_mean 0.01 / eval/reward_loss_std 2.8e-5 / eval/reward_max_data 0 / eval/reward_max_pred 0 / eval/reward_neg_acc 1 / eval/reward_neg_loss 0.01 / eval/reward_pos_acc nan / eval/reward_pos_loss nan / eval/reward_pred 0 / 
eval/reward_rate 0 / replay/size 2118 / replay/inserts 1080 / replay/samples 8640 / replay/insert_wait_avg 3e-6 / replay/insert_wait_frac 1 / replay/sample_wait_avg 1e-6 / replay/sample_wait_frac 1 / eval_replay/size 2540 / eval_replay/inserts 1002 / eval_replay/samples
16 / eval_replay/insert_wait_avg 2.4e-6 / eval_replay/insert_wait_frac 1 / eval_replay/sample_wait_avg 1.3e-6 / eval_replay/sample_wait_frac 1 / timer/duration 291.61 / timer/env.step_count 1080 / timer/env.step_total 5.81 / timer/env.step_frac 0.02 / timer/env.step_avg
5.4e-3 / timer/env.step_min 4.6e-3 / timer/env.step_max 0.07 / timer/replay._sample_count 8640 / timer/replay._sample_total 120.79 / timer/replay._sample_frac 0.41 / timer/replay._sample_avg 0.01 / timer/replay._sample_min 5.4e-3 / timer/replay._sample_max 0.03 / 
timer/agent.save_count 0 / timer/agent.save_total 0 / timer/agent.save_frac 0 / timer/agent.policy_count 2082 / timer/agent.policy_total 16.42 / timer/agent.policy_frac 0.06 / timer/agent.policy_avg 7.9e-3 / timer/agent.policy_min 3.2e-3 / timer/agent.policy_max 8.28 / 
timer/dataset_train_count 540 / timer/dataset_train_total 0.04 / timer/dataset_train_frac 1.5e-4 / timer/dataset_train_avg 7.9e-5 / timer/dataset_train_min 7e-5 / timer/dataset_train_max 1.2e-4 / timer/agent.train_count 540 / timer/agent.train_total 263.75 / 
timer/agent.train_frac 0.9 / timer/agent.train_avg 0.49 / timer/agent.train_min 0.45 / timer/agent.train_max 0.52 / timer/agent.report_count 2 / timer/agent.report_total 0.12 / timer/agent.report_frac 4.2e-4 / timer/agent.report_avg 0.06 / timer/agent.report_min 0.06 / 
timer/agent.report_max 0.06 / timer/dataset_eval_count 1 / timer/dataset_eval_total 4e-5 / timer/dataset_eval_frac 1.4e-7 / timer/dataset_eval_avg 4e-5 / timer/dataset_eval_min 4e-5 / timer/dataset_eval_max 4e-5 / fps 7.41

GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
Starting evaluation at step 2500 Counter(2500) 2437
Saved chunk: 20230915T214910F632842-1CsQkCNcXJG0cP23qoZjaP-3pXlJfmQpBoYwphuJglV7m-1024.npz
eval_Episode has 500 steps and return 0.0.
train_Episode has 500 steps and return 0.0.
Starting evaluation at step 3000 Counter(3000) 2937
eval_Episode has 500 steps and return 0.1.
train_Episode has 500 steps and return 0.0.
Saved chunk: 20230915T215136F655274-6lF2nqDidyJuPzp5GKNNg3-43j7Hm8wPUctkjiTEp0PeJ-1024.npz
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── Step 6618 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
eval_episode/length 500 / eval_episode/score 0.1 / eval_episode/reward_rate 0 / episode/length 500 / episode/score 0 / episode/reward_rate 0 / train/action_mag 4.62 / train/action_max 4.56 / train/action_mean 0.1 / train/action_min -4.39 / train/action_std 1.07 / 
train/actor_opt_actor_opt_grad_overflow 0 / train/actor_opt_actor_opt_grad_scale 1e4 / train/actor_opt_grad_norm 5.6e-5 / train/actor_opt_grad_steps 825 / train/actor_opt_loss -16.63 / train/adv_mag 1.4e-7 / train/adv_max 1.3e-7 / train/adv_mean -3e-10 / train/adv_min 
-1.4e-7 / train/adv_std 3.9e-8 / train/cont_avg 1 / train/cont_loss_mean 1.3e-5 / train/cont_loss_std 4.8e-6 / train/cont_neg_acc nan / train/cont_neg_loss nan / train/cont_pos_acc 1 / train/cont_pos_loss 1.3e-5 / train/cont_pred 1 / train/cont_rate 1 / 
train/disag_opt_disag_opt_grad_overflow 0 / train/disag_opt_disag_opt_grad_scale 1e4 / train/disag_opt_grad_norm 22.4 / train/disag_opt_grad_steps 825 / train/disag_opt_loss 1.6e6 / train/dyn_loss_mean 3.08 / train/dyn_loss_std 2.1 / 
train/extr_critic_critic_opt_critic_opt_grad_overflow 0 / train/extr_critic_critic_opt_critic_opt_grad_scale 1e4 / train/extr_critic_critic_opt_grad_norm 2.54 / train/extr_critic_critic_opt_grad_steps 825 / train/extr_critic_critic_opt_loss 1506.58 / 
train/extr_critic_mag 1.4e-7 / train/extr_critic_max 1.4e-7 / train/extr_critic_mean 8.8e-9 / train/extr_critic_min 0 / train/extr_critic_std 3.2e-8 / train/extr_return_normed_mag 1.4e-7 / train/extr_return_normed_max 1.4e-7 / train/extr_return_normed_mean 9.7e-9 / 
train/extr_return_normed_min 1.3e-9 / train/extr_return_normed_std 2.3e-8 / train/extr_return_rate 0 / train/extr_return_raw_mag 1.3e-7 / train/extr_return_raw_max 1.3e-7 / train/extr_return_raw_mean 8.5e-9 / train/extr_return_raw_min 0 / train/extr_return_raw_std 
2.3e-8 / train/extr_reward_mag 0 / train/extr_reward_max -inf / train/extr_reward_mean 0 / train/extr_reward_min 0 / train/extr_reward_std 0 / train/image_loss_mean 19.83 / train/image_loss_std 6.07 / train/model_loss_mean 21.68 / train/model_loss_std 6.6 / 
train/model_opt_grad_norm 30.64 / train/model_opt_grad_steps 816 / train/model_opt_loss 474.91 / train/model_opt_model_opt_grad_overflow 0 / train/model_opt_model_opt_grad_scale 23.02 / train/policy_entropy_mag 5.67 / train/policy_entropy_max 5.67 / 
train/policy_entropy_mean 5.66 / train/policy_entropy_min 5.61 / train/policy_entropy_std 2.8e-3 / train/policy_logprob_mag 15.99 / train/policy_logprob_max -3.67 / train/policy_logprob_mean -5.59 / train/policy_logprob_min -15.99 / train/policy_logprob_std 1.36 / 
train/policy_randomness_mag 1 / train/policy_randomness_max 1 / train/policy_randomness_mean 1 / train/policy_randomness_min 0.99 / train/policy_randomness_std 3.1e-4 / train/post_ent_mag 56.04 / train/post_ent_max 56.04 / train/post_ent_mean 47.98 / train/post_ent_min 
43.06 / train/post_ent_std 2.31 / train/prior_ent_mag 59.62 / train/prior_ent_max 59.62 / train/prior_ent_mean 52.1 / train/prior_ent_min 49.15 / train/prior_ent_std 1.93 / train/rep_loss_mean 3.08 / train/rep_loss_std 2.1 / train/reward_avg 0 / train/reward_loss_mean 
6.8e-3 / train/reward_loss_std 2.4e-5 / train/reward_max_data 0 / train/reward_max_pred 0 / train/reward_neg_acc 1 / train/reward_neg_loss 6.8e-3 / train/reward_pos_acc nan / train/reward_pos_loss nan / train/reward_pred 0 / train/reward_rate 0 / 
eval_stats/mean_log_entropy 0 / train_stats/mean_log_entropy 5.65 / report/cont_avg 1 / report/cont_loss_mean 9e-6 / report/cont_loss_std 4.2e-6 / report/cont_neg_acc nan / report/cont_neg_loss nan / report/cont_pos_acc 1 / report/cont_pos_loss 9e-6 / report/cont_pred 1
/ report/cont_rate 1 / report/dyn_loss_mean 4.07 / report/dyn_loss_std 2.8 / report/image_loss_mean 13.85 / report/image_loss_std 5.65 / report/model_loss_mean 16.3 / report/model_loss_std 6.33 / report/post_ent_mag 40.37 / report/post_ent_max 40.37 / 
report/post_ent_mean 30.57 / report/post_ent_min 24.39 / report/post_ent_std 2.77 / report/prior_ent_mag 49.97 / report/prior_ent_max 49.97 / report/prior_ent_mean 35.16 / report/prior_ent_min 29.49 / report/prior_ent_std 3.4 / report/rep_loss_mean 4.07 / 
report/rep_loss_std 2.8 / report/reward_avg 0 / report/reward_loss_mean 3.6e-3 / report/reward_loss_std 1.9e-5 / report/reward_max_data 0 / report/reward_max_pred 0 / report/reward_neg_acc 1 / report/reward_neg_loss 3.6e-3 / report/reward_pos_acc nan / 
report/reward_pos_loss nan / report/reward_pred 0 / report/reward_rate 0 / eval/cont_avg 1 / eval/cont_loss_mean 8.6e-6 / eval/cont_loss_std 3.1e-6 / eval/cont_neg_acc nan / eval/cont_neg_loss nan / eval/cont_pos_acc 1 / eval/cont_pos_loss 8.6e-6 / eval/cont_pred 1 / 
eval/cont_rate 1 / eval/dyn_loss_mean 5.13 / eval/dyn_loss_std 2.96 / eval/image_loss_mean 17.82 / eval/image_loss_std 6.21 / eval/model_loss_mean 20.91 / eval/model_loss_std 6.84 / eval/post_ent_mag 45.39 / eval/post_ent_max 45.39 / eval/post_ent_mean 32.3 / 
eval/post_ent_min 25.86 / eval/post_ent_std 3.08 / eval/prior_ent_mag 49.97 / eval/prior_ent_max 49.97 / eval/prior_ent_mean 35.91 / eval/prior_ent_min 30.7 / eval/prior_ent_std 2.71 / eval/rep_loss_mean 5.13 / eval/rep_loss_std 2.96 / eval/reward_avg 0 / 
eval/reward_loss_mean 3.7e-3 / eval/reward_loss_std 1.6e-5 / eval/reward_max_data 0 / eval/reward_max_pred 0 / eval/reward_neg_acc 1 / eval/reward_neg_loss 3.7e-3 / eval/reward_pos_acc nan / eval/reward_pos_loss nan / eval/reward_pred 0 / eval/reward_rate 0 / 
replay/size 3246 / replay/inserts 1128 / replay/samples 9024 / replay/insert_wait_avg 3e-6 / replay/insert_wait_frac 1 / replay/sample_wait_avg 1e-6 / replay/sample_wait_frac 1 / eval_replay/size 3542 / eval_replay/inserts 1002 / eval_replay/samples 16 / 
eval_replay/insert_wait_avg 2.4e-6 / eval_replay/insert_wait_frac 1 / eval_replay/sample_wait_avg 1.3e-6 / eval_replay/sample_wait_frac 1 / timer/duration 300.36 / timer/env.step_count 1128 / timer/env.step_total 5.99 / timer/env.step_frac 0.02 / timer/env.step_avg 
5.3e-3 / timer/env.step_min 4.6e-3 / timer/env.step_max 0.01 / timer/replay._sample_count 9024 / timer/replay._sample_total 127.26 / timer/replay._sample_frac 0.42 / timer/replay._sample_avg 0.01 / timer/replay._sample_min 6.8e-3 / timer/replay._sample_max 0.04 / 
timer/agent.save_count 0 / timer/agent.save_total 0 / timer/agent.save_frac 0 / timer/agent.policy_count 2130 / timer/agent.policy_total 8.32 / timer/agent.policy_frac 0.03 / timer/agent.policy_avg 3.9e-3 / timer/agent.policy_min 3.2e-3 / timer/agent.policy_max 0.02 / 
timer/dataset_train_count 564 / timer/dataset_train_total 0.05 / timer/dataset_train_frac 1.5e-4 / timer/dataset_train_avg 8.1e-5 / timer/dataset_train_min 7.1e-5 / timer/dataset_train_max 1.8e-4 / timer/agent.train_count 564 / timer/agent.train_total 280.45 / 
timer/agent.train_frac 0.93 / timer/agent.train_avg 0.5 / timer/agent.train_min 0.47 / timer/agent.train_max 0.61 / timer/agent.report_count 2 / timer/agent.report_total 0.13 / timer/agent.report_frac 4.4e-4 / timer/agent.report_avg 0.07 / timer/agent.report_min 0.06 / 
timer/agent.report_max 0.07 / timer/dataset_eval_count 1 / timer/dataset_eval_total 3.8e-5 / timer/dataset_eval_frac 1.3e-7 / timer/dataset_eval_avg 3.8e-5 / timer/dataset_eval_min 3.8e-5 / timer/dataset_eval_max 3.8e-5 / fps 7.51

GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
GIF summaries require ffmpeg in $PATH. [Errno 2] No such file or directory: 'ffmpeg'
Starting evaluation at step 3500 Counter(3500) 3437
eval_Episode has 500 steps and return 0.0.
Saved chunk: 20230915T215337F996332-3pXlJfmQpBoYwphuJglV7m-7nmV1u3mZkREzPcuJNgiuc-1024.npz
train_Episode has 500 steps and return 0.0.
Starting evaluation at step 4000 Counter(4000) 3937
eval_Episode has 500 steps and return 0.0.
train_Episode has 500 steps and return 0.0.
Saved chunk: 20230915T215610F057757-43j7Hm8wPUctkjiTEp0PeJ-4MyALzD5sBrA0hUKYyy0MC-1024.npz
Writing checkpoint: /fs/cml-projects/Pretrain_MBRL/coplanner_dreamerv3_exp/0.5_1/dmc_hopper_hop/3/checkpoint.ckpt
╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/train.py:207 in <module>                             │
│                                                                                                  │
│   204                                                                                            │
│   205                                                                                            │
│   206 if __name__ == '__main__':                                                                 │
│ ❱ 207   main()                                                                                   │
│   208                                                                                            │
│                                                                                                  │
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/train.py:67 in main                                  │
│                                                                                                  │
│    64 │     eval_env = make_envs(config)  # mode='eval'                                          │
│    65 │     cleanup += [env, eval_env]                                                           │
│    66 │     agent = agt.Agent(env.obs_space, env.act_space, step, config)                        │
│ ❱  67 │     embodied.run.train_eval(                                                             │
│    68 │   │     agent, env, eval_env, replay, eval_replay, logger, args, config)                 │
│    69 │                                                                                          │
│    70 │   elif args.script == 'train_holdout':                                                   │
│                                                                                                  │
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/embodied/run/train_eval.py:144 in train_eval         │
│                                                                                                  │
│   141 │     driver_eval(policy_eval, episodes=max(len(eval_env), args.eval_eps))                 │
│   142 │   driver_train(policy_train, steps=100)                                                  │
│   143 │   if should_save(step):                                                                  │
│ ❱ 144 │     checkpoint.save()                                                                    │
│   145   logger.write()                                                                           │
│   146   logger.write()                                                                           │
│   147                                                                                            │
│                                                                                                  │
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/embodied/core/checkpoint.py:52 in save               │
│                                                                                                  │
│   49 │   filename = path.Path(filename or self._filename)                                        │
│   50 │   self._log and print(f'Writing checkpoint: {filename}')                                  │
│   51 │   if self._parallel:                                                                      │
│ ❱ 52 │     self._promise and self._promise.result()                                              │
│   53 │     self._promise = self._worker.submit(self._save, filename, keys)                       │
│   54 │   else:                                                                                   │
│   55 │     self._save(filename, keys)                                                            │
│                                                                                                  │
│ /cmlscratch/xywang/anaconda3/envs/dreamerv3/lib/python3.9/concurrent/futures/_base.py:439 in     │
│ result                                                                                           │
│                                                                                                  │
│   436 │   │   │   │   if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:                     │
│   437 │   │   │   │   │   raise CancelledError()                                                 │
│   438 │   │   │   │   elif self._state == FINISHED:                                              │
│ ❱ 439 │   │   │   │   │   return self.__get_result()                                             │
│   440 │   │   │   │                                                                              │
│   441 │   │   │   │   self._condition.wait(timeout)                                              │
│   442                                                                                            │
│                                                                                                  │
│ /cmlscratch/xywang/anaconda3/envs/dreamerv3/lib/python3.9/concurrent/futures/_base.py:391 in     │
│ __get_result                                                                                     │
│                                                                                                  │
│   388 │   def __get_result(self):                                                                │
│   389 │   │   if self._exception:                                                                │
│   390 │   │   │   try:                                                                           │
│ ❱ 391 │   │   │   │   raise self._exception                                                      │
│   392 │   │   │   finally:                                                                       │
│   393 │   │   │   │   # Break a reference cycle with the exception in self._exception            │
│   394 │   │   │   │   self = None                                                                │
│                                                                                                  │
│ /cmlscratch/xywang/anaconda3/envs/dreamerv3/lib/python3.9/concurrent/futures/thread.py:58 in run │
│                                                                                                  │
│    55 │   │   │   return                                                                         │
│    56 │   │                                                                                      │
│    57 │   │   try:                                                                               │
│ ❱  58 │   │   │   result = self.fn(*self.args, **self.kwargs)                                    │
│    59 │   │   except BaseException as exc:                                                       │
│    60 │   │   │   self.future.set_exception(exc)                                                 │
│    61 │   │   │   # Break a reference cycle with the exception 'exc'                             │
│                                                                                                  │
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/embodied/core/checkpoint.py:68 in _save              │
│                                                                                                  │
│   65 │     filename.write(basics.pack(data), mode='wb')                                          │
│   66 │     old.remove()                                                                          │
│   67 │   else:                                                                                   │
│ ❱ 68 │     filename.write(basics.pack(data), mode='wb')                                          │
│   69 │   self._log and print(f'Wrote checkpoint: {filename}')                                    │
│   70                                                                                             │
│   71   def load(self, filename=None, keys=None):                                                 │
│                                                                                                  │
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/embodied/core/path.py:79 in write                    │
│                                                                                                  │
│    76                                                                                            │
│    77   def write(self, content, mode='w'):                                                      │
│    78 │   assert mode in 'w a wb ab'.split(), mode                                               │
│ ❱  79 │   with self.open(mode) as f:                                                             │
│    80 │     f.write(content)                                                                     │
│    81                                                                                            │
│    82   @contextlib.contextmanager                                                               │
│                                                                                                  │
│ /cmlscratch/xywang/anaconda3/envs/dreamerv3/lib/python3.9/contextlib.py:119 in __enter__         │
│                                                                                                  │
│   116 │   │   # they are only needed for recreation, which is not possible anymore               │
│   117 │   │   del self.args, self.kwds, self.func                                                │
│   118 │   │   try:                                                                               │
│ ❱ 119 │   │   │   return next(self.gen)                                                          │
│   120 │   │   except StopIteration:                                                              │
│   121 │   │   │   raise RuntimeError("generator didn't yield") from None                         │
│   122                                                                                            │
│                                                                                                  │
│ /cmlscratch/xywang/code/dreamerv3/dreamerv3/embodied/core/path.py:125 in open                    │
│                                                                                                  │
│   122                                                                                            │
│   123   @contextlib.contextmanager                                                               │
│   124   def open(self, mode='r'):                                                                │
│ ❱ 125 │   with open(str(self), mode=mode) as f:                                                  │
│   126 │     yield f                                                                              │
│   127                                                                                            │
│   128   def absolute(self):                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
FileNotFoundError: [Errno 2] No such file or directory: '/fs/cml-projects/Pretrain_MBRL/coplanner_dreamerv3_exp/0.5_1/dmc_hopper_hop/3/checkpoint.ckpt'
